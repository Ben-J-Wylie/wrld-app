// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// -----------------------------------------------------------------------------
//  WRLD Project - Prisma Schema
// -----------------------------------------------------------------------------

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------
//  MODELS
// -----------------------------------------------------------------------------

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String
  verified         Boolean  @default(false)
  emailVerifiedAt  DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  username         String?   @unique
  firstName        String?  @db.VarChar(50)
  lastName         String?  @db.VarChar(50)
  dob              DateTime?
  avatarUrl        String?  @db.Text

  sessions         Session[]
  emailTokens      EmailVerificationToken[]
  resetTokens      PasswordResetToken[]
  followers        Follow[] @relation("Followers")
  following        Follow[] @relation("Following")

  @@map("users")
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model EmailVerificationToken {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash  String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash  String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

// -----------------------------------------------------------------------------
//  SOCIAL GRAPH
// -----------------------------------------------------------------------------

model Follow {
  id           String   @id @default(cuid())
  followerId   String
  followingId  String
  createdAt    DateTime @default(now())

  follower     User @relation("Following", fields: [followerId], references: [id])
  following    User @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
